def Executing_NMA(array, string):
    # главная функция перебирает все команды, в зависимости от решения определяющей функции отправляет либо в programmer, либо в onemovecommand
    def globalfunction(s):
        i = 0
        c = 1
        while True:
            while commandarray[i] != '.':
                # какая стрелка
                if oneoraspossiblemove(commandarray[i]) == False:
                    # => команда
                    if onemovecommand(commandarray[i], s) != s:
                        s = onemovecommand(commandarray[i], s)
                        print(s)
                        return s
                    # -> команда
                elif oneoraspossiblemove(commandarray[i]) == True:
                    c += 1
                    # если не последняя строчка
                    if i < len(commandarray) - 1:
                        # если слово меняется
                        if aspossiblemovecommand(commandarray[i], s) != s:
                            s = aspossiblemovecommand(commandarray[i], s)
                            i = -1
                    else:
                        # если последняя команда
                        if aspossiblemovecommand(commandarray[i], s) == s:
                            print(s)
                            return s
                        else:
                            s = aspossiblemovecommand(commandarray[i], s)
                            i = -1
                else:
                    return("SyntaxError: cannot read string " + str(i + 1) + '.')
                print(s)
                i += 1
                if c > 1000:
                    return 'RunTimeError!'
            print(s)
            return s

    def commands(ar):
        global commandarray
        commandarray = ar
        commandarray.append('.')
        return globalfunction(experimentstring)

    # заменяем первое вхождение из команды c в строке s и выходим
    def onemovecommand(c, s):
        i = 0
        past = ''
        change = ''
        while c[i] != ' ':
            past += c[i]
            i += 1

        i += 4

        while i != len(c):
            change += c[i]
            i += 1

        s = s.replace(past, change, 1)

        return s

    # делаем команду с пока возможно в слове s
    def aspossiblemovecommand(c, s):
        i = 0
        past = ''
        change = ''
        while c[i] != ' ':
            past += c[i]
            i += 1

        i += 4

        while i < len(c):
            change += c[i]
            i += 1

        s = str(s).replace(past, change, 1)

        return s

    # функция определяет, команда со ->, или с =>, и отправляет True или False
    def oneoraspossiblemove(c):
        for i in range(len(c)):
            if c.find(' -> ') or c.find(' => '):
                if c[i] == '-' and c[i - 1] == ' ' and c[i + 1] == '>':
                    return True
                elif c[i] == '=' and c[i - 1] == ' ' and c[i + 1] == '>':
                    return False
            else:
                return -1

    # подопытная строка
    experimentstring = string

    # призыв считывания команд
    return commands(array)
